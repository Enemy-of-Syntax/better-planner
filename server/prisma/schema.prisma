// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model user {
  id             String       @id @default(uuid()) 
  email          String       @unique
  name           String       @db.String()
  password       String       @db.String()
  organizationId String       @db.String()       @map("organization_id")
  organization   organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())     @map("created_at")
  updatedAt      DateTime     @updatedAt          @map("updated_at")

  member           member[]
  team             team[]
  @@map("users")
}

model project {
  id             String             @id @default(uuid())
  name           String
  organizationId String             @db.String()       @map("organization_id")
  organization   organization       @relation(fields: [organizationId], references: [id],onUpdate: Cascade, onDelete: Cascade)
  status         PROJECT_STATUS     @default(ONGOING)
  createdAt      DateTime           @default(now())    @map("created_at")
  updatedAt      DateTime           @updatedAt         @map("updated_at")

  @@map("projects")
}


model organization {
  id     String                           @id @default(uuid())
  name   String                           @unique
  status ORGANIZATION_STATUS              @default(ACTIVE)
  createdAt DateTime  @default(now())     @map("created_at")
  updatedAt DateTime  @updatedAt          @map("updated_at")

  user      user[]
  team      team[]
  project   project[]
  board     board[]

  @@map("organizations")
}

model team {
  id             String       @id @default(uuid())
  name           String
  organizationId String       @map("organization_id")
  organization   organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdUserId  String       @map("created_user_id")
  createdBy      user         @relation(fields: [createdUserId],references: [id],onDelete: Cascade) 
  createdAt      DateTime     @default(now())   @map("created_at")
  updatedAt      DateTime     @updatedAt        @map("updated_at")

  member        member[]

  @@map("teams")
}

model member {
  id            String          @id @default(uuid())
  teamId        String         @map("team_id")
  team          team           @relation(fields: [teamId],references: [id]) 
  userId        String         @map("user_id")
  user           user          @relation(fields: [userId],references: [id])
  role          MEMBER_ROLE    @default(MEMBER)
  status        MEMBER_STATUS   @default(ACTIVE)
  tasks         taskAssignOnMember[]

  @@map("members")
}

model taskAssignOnMember {
  id          String      @id @default(uuid())
  memberId    String       @map("member_id")
  member      member      @relation(fields: [memberId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  taskId      String      @map("task_id")
  task        task        @relation(fields: [taskId],references: [id],onDelete: Cascade,onUpdate: Cascade)
}


model board {
  id              String        @id @default(uuid())
  name            String        @db.String()
  organizationId  String        @map("organization_id")
  organization    organization  @relation(fields: [organizationId],references: [id],onDelete:NoAction ,onUpdate:Cascade )

  task           task[]
  @@map("boards")
}


model task {
  id               String        @id  @default(uuid())
  title            String        @db.String()
  description      String        @db.String()
  boardId          String        @db.String()
  board            board         @relation(fields: [boardId],references: [id],onUpdate: Cascade,onDelete: Cascade)
  startDate        DateTime      @default(now())    @map("start_date")
  dueDate          DateTime                         @map("due_date")  
  createdAt        DateTime     @default(now())     @map("created_at")
  updatedAt        DateTime     @updatedAt()
  label            label[]
  file             file[]
  members  taskAssignOnMember[]

  @@map("tasks")
}

model label {
  id                String      @id  @default(uuid())
  color             String      @db.String()
  title             String      @db.String()
  taskId            String      @db.String()    @map("task_id")
  task              task        @relation(fields: [taskId],references: [id],onUpdate: Cascade,onDelete: NoAction)

  @@map("labels") 
}

model file {
  id                String      @id @default(uuid())
  name              String      @db.String()
  link              String      @db.String()
  taskId            String      @map("task_id")
  task              task       @relation(fields: [taskId],references: [id],onUpdate: Cascade,onDelete: Cascade)

  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@map("files")
}

//Enum
enum ORGANIZATION_STATUS {
  ACTIVE
  BAN
}

enum PROJECT_STATUS {
  ONGOING 
  SUSPENDED
  COMPLETED
}

enum MEMBER_ROLE {
  ADMIN
  MEMBER
}

enum  MEMBER_STATUS {
  ACTIVE 
  INACTIVE   // member is not available on work, cuz of vacation or sick 
  AVAILABLE   // free and ready to take new assignments
  BUSY      
  OUT_OF_OFFICE
}
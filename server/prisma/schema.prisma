// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model user {
  id            String             @id @unique @default(uuid())
  email         String             @unique
  name          String?            @db.String()
  imageId       String?            @unique @map("image_id")
  image         file?              @relation(fields: [imageId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  role          USER_ROLE?         @default(MEMBER)
  status        INVITATION_STATUS?
  recoveryCode  String?            @map("recovery_code") @db.String()
  refreshToken  String?            @map("refresh_token")
  password      String             @db.String()
  codeValidTime DateTime?          @map("code_valid_time")
  createdAt     DateTime           @default(now()) @map("created_at")
  updatedAt     DateTime           @updatedAt @map("updated_at")

  member       member[]       @relation("member")
  admin        member[]       @relation("admin")
  team         team[]
  project      project[]
  organization organization[]
  board        board[]
  task         task[]

  @@map("users")
}

model organization {
  id            String              @id @default(uuid())
  name          String              @unique
  imageId       String?             @map("image_id") @db.String()
  image         file?               @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status        ORGANIZATION_STATUS @default(ACTIVE)
  createdUserId String              @map("created_user_id")
  createdBy     user                @relation(fields: [createdUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt     DateTime            @default(now()) @map("created_at")
  updatedAt     DateTime            @updatedAt @map("updated_at")

  project project[]
  team    team[]

  @@map("organizations")
}

model project {
  id             String         @id @default(uuid())
  name           String         @unique @db.String()
  description    String         @db.String()
  imageId        String?        @map("image_id") @db.String()
  image          file?          @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status         PROJECT_STATUS @default(ACTIVE)
  organizationId String?        @map("organization_id")
  organization   organization?  @relation(fields: [organizationId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  createdUserId  String         @map("created_user_id")
  createdBy      user           @relation(fields: [createdUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")

  projectOnTeam ProjectOnTeam[]
  board         board[]
  @@map("projects")
}

model ProjectOnTeam {
  id        String   @id @default(uuid())
  projectId String?  @map("project_id") @db.String()
  project   project? @relation(fields: [projectId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  teamId    String?  @map("team_id") @db.String()
  team      team?    @relation(fields: [teamId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("project_on_teams")
}

model team {
  id             String        @id @default(uuid())
  name           String        @db.String()
  imageId        String?       @map("image_id") @db.String()
  image          file?         @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String?       @map("organization_id") @db.String()
  organization   organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  createdUserId  String        @map("created_user_id")
  createdBy      user          @relation(fields: [createdUserId], references: [id], onDelete: Cascade)
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")

  projectOnTeam ProjectOnTeam[]
  member        member[]
  board         board[]

  @@map("teams")
}

model member {
  id            String        @id @default(uuid())
  teamId        String?       @map("team_id")
  team          team?         @relation(fields: [teamId], references: [id])
  userId        String        @map("user_id")
  user          user          @relation("member", fields: [userId], references: [id])
  role          MEMBER_ROLE   @default(MEMBER)
  status        MEMBER_STATUS @default(ACTIVE)
  createdUserId String        @map("created_user_id")
  createdBy     user          @relation("admin", fields: [createdUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  tasks     taskAssignOnMember[]

  @@map("members")
}

model taskAssignOnMember {
  id        String   @id @default(uuid())
  memberId  String   @map("member_id")
  member    member   @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  taskId    String   @map("task_id")
  task      task     @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model board {
  id            String   @id @default(uuid())
  name          String   @db.String()
  teamId        String?  @unique @map("team_id") @db.String()
  team          team?    @relation(fields: [teamId], references: [id], onUpdate: SetNull, onDelete: Cascade)
  projectId     String?  @map("project_id") @db.String()
  project       project? @relation(fields: [projectId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  createdUserId String   @map("created_user_id")
  createdBy     user     @relation(fields: [createdUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  task          task[]

  @@map("boards")
}

model task {
  id            String               @id @default(uuid())
  title         String               @db.String()
  description   String               @db.String()
  boardId       String               @map("board_id") @db.String()
  board         board                @relation(fields: [boardId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  startDate     DateTime             @default(now()) @map("start_date")
  dueDate       DateTime             @map("due_date")
  createdUserId String               @map("created_user_id")
  createdBy     user                 @relation(fields: [createdUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt     DateTime             @default(now()) @map("created_at")
  updatedAt     DateTime             @updatedAt() @map("updated_at")
  label         label[]
  file          file[]
  members       taskAssignOnMember[]

  @@map("tasks")
}

model label {
  id        String   @id @default(uuid())
  color     String   @db.String()
  title     String   @db.String()
  taskId    String   @map("task_id") @db.String()
  task      task     @relation(fields: [taskId], references: [id], onUpdate: Cascade, onDelete: NoAction)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("labels")
}

model file {
  id        String   @id @unique @default(uuid())
  name      String   @db.String()
  path      String   @db.String()
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user         user?
  project      project[]
  organization organization[]
  team         team[]
  task         task[]

  @@map("files")
}

//Enum
enum USER_ROLE {
  ADMIN
  MEMBER
  SUPER_ADMIN
}

enum ORGANIZATION_STATUS {
  ACTIVE
  BAN
}

enum PROJECT_STATUS {
  ACTIVE
  CLOSED
  ONHOLD
}

enum MEMBER_ROLE {
  SUPER_ADMIN
  ADMIN
  LEADER
  MEMBER
}

enum MEMBER_STATUS {
  ACTIVE
  INACTIVE // member is not available on work, cuz of vacation or sick 
  AVAILABLE // free and ready to take new assignments
  BUSY
  OUT_OF_OFFICE
}

enum INVITATION_STATUS {
  INVITED
  ACCEPTED
}
